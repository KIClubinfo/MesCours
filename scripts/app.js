
/**
  @ngdoc module
  @name edt-demo
  @module edt-demo
  @description

  This module requires all submodules of your app
 */
angular.module('edt-demo', ['ngMaterial', 'edt-demo.utils', 'edt-demo.edt']);


/**
  @ngdoc module
  @name edt-demo.landing
  @module edt-demo.landing
  @description

  Landing page of the application.
 */
angular.module('edt-demo.edt', ['ng', 'ui.router', 'pascalprecht.translate']);


/**
  @ngdoc module
  @name boilerplate.utils
  @module boilerplate.utils
  @description

  This module contains helpers and global configuration required by your app
 */
angular.module('edt-demo.utils', ['ng', 'ui.router', 'pascalprecht.translate']);

angular.module('edt-demo.edt').constant('BASE_API_URL', 'http://127.0.0.1:5000/');

angular.module('edt-demo.edt').config(function($stateProvider) {
  return $stateProvider.state('edt', {
    url: '/',
    controller: 'CourseListCtrl',
    templateUrl: 'edt/views/view.html'
  });
});

angular.module('edt-demo.edt').config(function($translateProvider) {
  $translateProvider.translations('en', {
    HOME_TITLE: 'Welcome',
    HOME_TEXT: 'This is the beginning of an extraordinary app...'
  });
  return $translateProvider.translations('fr', {
    HOME_TITLE: 'Bienvenue',
    HOME_TEXT: 'Ceci est le commencement d\'une appli extraordinaire...'
  });
});

angular.module('edt-demo.edt').controller('CourseListCtrl', function($scope, $mdDialog, CourseFactory, DepartmentListExtractor) {
  var alertNoNetwork;
  $scope.currentDepartment = null;
  $scope.errorNoNetwork = false;
  alertNoNetwork = $mdDialog.alert().title('Erreur réseau').content('Impossible de récupérer la liste des cours !').ariaLabel('Network error').ok('Dommage :(');
  $scope.loadCourses = function() {
    console.log("Go !");
    return CourseFactory.findAll().success(function(data) {
      $scope.errorNoNetwork = false;
      $scope.courses = data;
      console.log("Found " + $scope.courses.length + " courses");
      $scope.departments = DepartmentListExtractor.extract($scope.courses);
      return console.log("Found " + $scope.departments.length + " departments");
    }).error(function() {
      $mdDialog.show(alertNoNetwork);
      return $scope.errorNoNetwork = true;
    });
  };
  $scope.departmentFilter = function(course) {
    return !$scope.currentDepartment || course.department === $scope.currentDepartment;
  };
  return $scope.loadCourses();
});

angular.module('edt-demo.edt').factory('CourseFactory', function($rootScope, $http, BASE_API_URL) {
  var findAll, findByDepartment;
  findAll = function(date) {
    var params;
    if (date == null) {
      date = null;
    }
    params = {
      date: date || moment().format('DD/MM/YYYY')
    };
    return $http({
      method: 'GET',
      url: BASE_API_URL + 'courses',
      params: params
    }).success(function(data) {
      return data;
    });
  };
  findByDepartment = function(departmentCode, date) {
    var params;
    if (date == null) {
      date = null;
    }
    params = {
      date: date || moment().format('DD/MM/YYYY'),
      department: departmentCode
    };
    return $http({
      method: 'GET',
      url: BASE_API_URL + 'courses',
      params: params
    }).success(function(data) {
      return data;
    });
  };
  return {
    findAll: findAll,
    findByDepartment: findByDepartment
  };
});

angular.module('edt-demo.edt').service('DepartmentListExtractor', function() {
  var extract;
  extract = function(courses) {
    var course, departments, _i, _len;
    departments = [];
    for (_i = 0, _len = courses.length; _i < _len; _i++) {
      course = courses[_i];
      if (departments.indexOf(course.department) === -1) {
        departments.push(course.department);
      }
    }
    return departments;
  };
  return {
    extract: extract
  };
});

angular.module('edt-demo.utils').config(function($translateProvider) {
  $translateProvider.fallbackLanguage('en');
  return $translateProvider.determinePreferredLanguage();
});

angular.module('edt-demo.utils').config(function($locationProvider) {
  $locationProvider.html5Mode(true);
  return $locationProvider.hashPrefix('!');
});


/**
  @ngdoc object
  @name storage
  @module edt-demo.utils
  @description

  This value object is an application-wide data-store.
  It's published in `$rootScope` for easy-access in views.
 */
angular.module('edt-demo.utils').value('storage', {}).run(function($rootScope, storage) {
  return $rootScope.storage = storage;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uY29mZmVlIiwiZWR0L21vZHVsZS5jb2ZmZWUiLCJ1dGlscy9tb2R1bGUuY29mZmVlIiwiZWR0L2NvbmZpZy9jb25maWcuY29mZmVlIiwiZWR0L2NvbmZpZy9yb3V0ZXMuY29mZmVlIiwiZWR0L2NvbmZpZy90cmFuc2xhdGlvbnMuY29mZmVlIiwiZWR0L2NvbnRyb2xsZXJzL2NvdXJzZV9saXN0LmNvZmZlZSIsImVkdC9zZXJ2aWNlcy9jb3Vyc2VfZmFjdG9yeS5jb2ZmZWUiLCJlZHQvc2VydmljZXMvZGVwYXJ0bWVudF9saXN0X2V4dHJhY3Rvci5jb2ZmZWUiLCJ1dGlscy9jb25maWcvaW5pdC10cmFuc2xhdGlvbnMuY29mZmVlIiwidXRpbHMvY29uZmlnL2luaXQtdXJscy5jb2ZmZWUiLCJ1dGlscy9jb25maWcvc3RvcmFnZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7Ozs7OztHQUFBO0FBQUEsT0FTTyxDQUFDLE1BQVIsQ0FBZ0IsVUFBaEIsRUFBMkIsQ0FDeEIsWUFEd0IsRUFFeEIsZ0JBRndCLEVBR3hCLGNBSHdCLENBQTNCLENBVEEsQ0FBQTs7QUNBQTtBQUFBOzs7Ozs7O0dBQUE7QUFBQSxPQVNPLENBQUMsTUFBUixDQUFnQixjQUFoQixFQUErQixDQUM1QixJQUQ0QixFQUU1QixXQUY0QixFQUc1Qix3QkFINEIsQ0FBL0IsQ0FUQSxDQUFBOztBQ0FBO0FBQUE7Ozs7Ozs7R0FBQTtBQUFBLE9BU08sQ0FBQyxNQUFSLENBQWdCLGdCQUFoQixFQUFpQyxDQUM5QixJQUQ4QixFQUU5QixXQUY4QixFQUc5Qix3QkFIOEIsQ0FBakMsQ0FUQSxDQUFBOztBQ0FBLE9BQU8sQ0FBQyxNQUFSLENBQWdCLGNBQWhCLENBQ0EsQ0FBQyxRQURELENBQ1csY0FEWCxFQUMyQix3QkFEM0IsQ0FBQSxDQUFBOztBQ0FBLE9BQU8sQ0FBQyxNQUFSLENBQWdCLGNBQWhCLENBQ0EsQ0FBQyxNQURELENBQ1EsU0FBQyxjQUFELEdB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OlsiIyMjKlxuICBAbmdkb2MgbW9kdWxlXG4gIEBuYW1lIGVkdC1kZW1vXG4gIEBtb2R1bGUgZWR0LWRlbW9cbiAgQGRlc2NyaXB0aW9uXG5cbiAgVGhpcyBtb2R1bGUgcmVxdWlyZXMgYWxsIHN1Ym1vZHVsZXMgb2YgeW91ciBhcHBcbiMjI1xuXG5hbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8nLCBbXG4gICduZ01hdGVyaWFsJ1xuICAnZWR0LWRlbW8udXRpbHMnXG4gICdlZHQtZGVtby5lZHQnXG5dXG4iLCIjIyMqXG4gIEBuZ2RvYyBtb2R1bGVcbiAgQG5hbWUgZWR0LWRlbW8ubGFuZGluZ1xuICBAbW9kdWxlIGVkdC1kZW1vLmxhbmRpbmdcbiAgQGRlc2NyaXB0aW9uXG5cbiAgTGFuZGluZyBwYWdlIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiMjI1xuXG5hbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8uZWR0JywgW1xuICAnbmcnXG4gICd1aS5yb3V0ZXInXG4gICdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJ1xuXVxuIiwiIyMjKlxuICBAbmdkb2MgbW9kdWxlXG4gIEBuYW1lIGJvaWxlcnBsYXRlLnV0aWxzXG4gIEBtb2R1bGUgYm9pbGVycGxhdGUudXRpbHNcbiAgQGRlc2NyaXB0aW9uXG5cbiAgVGhpcyBtb2R1bGUgY29udGFpbnMgaGVscGVycyBhbmQgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gcmVxdWlyZWQgYnkgeW91ciBhcHBcbiMjI1xuXG5hbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8udXRpbHMnLCBbXG4gICduZydcbiAgJ3VpLnJvdXRlcidcbiAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXG5dXG4iLCJhbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8uZWR0J1xuLmNvbnN0YW50ICdCQVNFX0FQSV9VUkwnLCAnaHR0cDovLzEyNy4wLjAuMTo1MDAwLydcbiIsImFuZ3VsYXIubW9kdWxlICdlZHQtZGVtby5lZHQnXG4uY29uZmlnICgkc3RhdGVQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXJcbiAgLnN0YXRlICdlZHQnLFxuICAgIHVybDogJy8nXG4gICAgY29udHJvbGxlcjogICdDb3Vyc2VMaXN0Q3RybCdcbiAgICB0ZW1wbGF0ZVVybDogJ2VkdC92aWV3cy92aWV3Lmh0bWwnXG4iLCJhbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8uZWR0J1xuLmNvbmZpZyAoJHRyYW5zbGF0ZVByb3ZpZGVyKSAtPlxuICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zICdlbicsXG4gICAgSE9NRV9USVRMRTogJ1dlbGNvbWUnXG4gICAgSE9NRV9URVhUOiAnVGhpcyBpcyB0aGUgYmVnaW5uaW5nIG9mIGFuIGV4dHJhb3JkaW5hcnkgYXBwLi4uJ1xuXG4gICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMgJ2ZyJyxcbiAgICBIT01FX1RJVExFOiAnQmllbnZlbnVlJ1xuICAgIEhPTUVfVEVYVDogJ0NlY2kgZXN0IGxlIGNvbW1lbmNlbWVudCBkXFwndW5lIGFwcGxpIGV4dHJhb3JkaW5haXJlLi4uJ1xuIiwiYW5ndWxhci5tb2R1bGUgJ2VkdC1kZW1vLmVkdCdcbi5jb250cm9sbGVyICdDb3Vyc2VMaXN0Q3RybCcsIChcbiAgJHNjb3BlXG4gICRtZERpYWxvZ1xuICBDb3Vyc2VGYWN0b3J5XG4gIERlcGFydG1lbnRMaXN0RXh0cmFjdG9yXG4pIC0+XG5cbiAgJHNjb3BlLmN1cnJlbnREZXBhcnRtZW50ID0gbnVsbFxuICAkc2NvcGUuZXJyb3JOb05ldHdvcmsgPSBmYWxzZVxuXG4gIGFsZXJ0Tm9OZXR3b3JrID0gJG1kRGlhbG9nLmFsZXJ0KClcbiAgLnRpdGxlKCdFcnJldXIgcsOpc2VhdScpXG4gIC5jb250ZW50KCdJbXBvc3NpYmxlIGRlIHLDqWN1cMOpcmVyIGxhIGxpc3RlIGRlcyBjb3VycyAhJylcbiAgLmFyaWFMYWJlbCgnTmV0d29yayBlcnJvcicpXG4gIC5vaygnRG9tbWFnZSA6KCcpXG5cbiAgJHNjb3BlLmxvYWRDb3Vyc2VzID0gKCkgLT5cbiAgICBjb25zb2xlLmxvZyBcIkdvICFcIlxuICAgIENvdXJzZUZhY3RvcnkuZmluZEFsbCgpXG4gICAgLnN1Y2Nlc3MgKGRhdGEpIC0+XG4gICAgICAkc2NvcGUuZXJyb3JOb05ldHdvcmsgPSBmYWxzZVxuXG4gICAgICAkc2NvcGUuY291cnNlcyA9IGRhdGFcbiAgICAgIGNvbnNvbGUubG9nIFwiRm91bmQgXCIrJHNjb3BlLmNvdXJzZXMubGVuZ3RoK1wiIGNvdXJzZXNcIlxuXG4gICAgICAkc2NvcGUuZGVwYXJ0bWVudHMgPSBEZXBhcnRtZW50TGlzdEV4dHJhY3Rvci5leHRyYWN0ICRzY29wZS5jb3Vyc2VzXG4gICAgICBjb25zb2xlLmxvZyBcIkZvdW5kIFwiKyRzY29wZS5kZXBhcnRtZW50cy5sZW5ndGgrXCIgZGVwYXJ0bWVudHNcIlxuXG4gICAgLmVycm9yICgpIC0+XG4gICAgICAkbWREaWFsb2cuc2hvdyggYWxlcnROb05ldHdvcmsgKVxuICAgICAgJHNjb3BlLmVycm9yTm9OZXR3b3JrID0gdHJ1ZVxuXG4gICRzY29wZS5kZXBhcnRtZW50RmlsdGVyID0gKGNvdXJzZSkgLT5cbiAgICAhJHNjb3BlLmN1cnJlbnREZXBhcnRtZW50IG9yIGNvdXJzZS5kZXBhcnRtZW50ID09ICRzY29wZS5jdXJyZW50RGVwYXJ0bWVudFxuXG4gICMgQ2FsbCB0aGUgQVBJXG4gICRzY29wZS5sb2FkQ291cnNlcygpXG4iLCJhbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8uZWR0J1xuLmZhY3RvcnkgJ0NvdXJzZUZhY3RvcnknLCAoXG4gICRyb290U2NvcGVcbiAgJGh0dHBcbiAgQkFTRV9BUElfVVJMXG4pIC0+XG5cbiAgZmluZEFsbCA9IChkYXRlID0gbnVsbCkgLT5cblxuICAgIHBhcmFtcyA9XG4gICAgICBkYXRlOiBkYXRlIG9yIG1vbWVudCgpLmZvcm1hdCAnREQvTU0vWVlZWSdcblxuICAgICRodHRwKFxuICAgICAgbWV0aG9kOiAgICdHRVQnXG4gICAgICB1cmw6ICAgICAgIEJBU0VfQVBJX1VSTCsnY291cnNlcydcbiAgICAgIHBhcmFtczogICAgcGFyYW1zXG4gICAgKVxuICAgIC5zdWNjZXNzIChkYXRhKSAtPlxuICAgICAgZGF0YVxuXG4gIGZpbmRCeURlcGFydG1lbnQgPSAoZGVwYXJ0bWVudENvZGUsIGRhdGUgPSBudWxsKSAtPlxuXG4gICAgcGFyYW1zID1cbiAgICAgIGRhdGU6IGRhdGUgb3IgbW9tZW50KCkuZm9ybWF0ICdERC9NTS9ZWVlZJ1xuICAgICAgZGVwYXJ0bWVudDogZGVwYXJ0bWVudENvZGVcblxuICAgICRodHRwKFxuICAgICAgbWV0aG9kOiAgICdHRVQnXG4gICAgICB1cmw6ICAgICAgIEJBU0VfQVBJX1VSTCsnY291cnNlcydcbiAgICAgIHBhcmFtczogICAgcGFyYW1zXG4gICAgKVxuICAgIC5zdWNjZXNzIChkYXRhKSAtPlxuICAgICAgZGF0YVxuXG4gIGZpbmRBbGw6IGZpbmRBbGxcbiAgZmluZEJ5RGVwYXJ0bWVudDogZmluZEJ5RGVwYXJ0bWVudFxuIiwiYW5ndWxhci5tb2R1bGUgJ2VkdC1kZW1vLmVkdCdcbi5zZXJ2aWNlICdEZXBhcnRtZW50TGlzdEV4dHJhY3RvcicsICgpIC0+XG4gIGV4dHJhY3QgPSAoY291cnNlcykgLT5cbiAgICAjIFdlIG5lZWQgdG8gZXh0cmFjdCB0aGUgZGVwYXJ0bWVudCBsaXN0IGZyb20gdGhlIGNvdXJzZXMgbGlzdFxuICAgIGRlcGFydG1lbnRzID0gW11cbiAgICBmb3IgY291cnNlIGluIGNvdXJzZXNcbiAgICAgIGlmIGRlcGFydG1lbnRzLmluZGV4T2YoY291cnNlLmRlcGFydG1lbnQpIGlzIC0xXG4gICAgICAgIGRlcGFydG1lbnRzLnB1c2ggY291cnNlLmRlcGFydG1lbnRcblxuICAgICMgUmV0dXJuIHRoZSBkZXBhcnRtZW50cyBsaXN0XG4gICAgZGVwYXJ0bWVudHNcblxuICBleHRyYWN0OiBleHRyYWN0XG4iLCJhbmd1bGFyLm1vZHVsZSAnZWR0LWRlbW8udXRpbHMnXG4uY29uZmlnICgkdHJhbnNsYXRlUHJvdmlkZXIpIC0+XG4gICR0cmFuc2xhdGVQcm92aWRlci5mYWxsYmFja0xhbmd1YWdlICdlbidcbiAgJHRyYW5zbGF0ZVByb3ZpZGVyLmRldGVybWluZVByZWZlcnJlZExhbmd1YWdlKClcbiIsImFuZ3VsYXIubW9kdWxlICdlZHQtZGVtby51dGlscydcbi5jb25maWcgKCRsb2NhdGlvblByb3ZpZGVyKSAtPlxuICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUgdHJ1ZVxuICAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4ICchJ1xuIiwiIyMjKlxuICBAbmdkb2Mgb2JqZWN0XG4gIEBuYW1lIHN0b3JhZ2VcbiAgQG1vZHVsZSBlZHQtZGVtby51dGlsc1xuICBAZGVzY3JpcHRpb25cblxuICBUaGlzIHZhbHVlIG9iamVjdCBpcyBhbiBhcHBsaWNhdGlvbi13aWRlIGRhdGEtc3RvcmUuXG4gIEl0J3MgcHVibGlzaGVkIGluIGAkcm9vdFNjb3BlYCBmb3IgZWFzeS1hY2Nlc3MgaW4gdmlld3MuXG4jIyNcblxuYW5ndWxhci5tb2R1bGUgJ2VkdC1kZW1vLnV0aWxzJ1xuLnZhbHVlICdzdG9yYWdlJywge31cblxuLnJ1biAoJHJvb3RTY29wZSwgc3RvcmFnZSkgLT5cbiAgJHJvb3RTY29wZS5zdG9yYWdlID0gc3RvcmFnZVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9