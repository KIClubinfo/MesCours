
/**
  @ngdoc module
  @name edt-demo
  @module edt-demo
  @description

  This module requires all submodules of your app
 */
'use strict';
angular.module('edt-demo', ['ngMaterial', 'LocalStorageModule', 'edt-demo.utils', 'edt-demo.edt']);


/**
  @ngdoc module
  @name edt-demo.landing
  @module edt-demo.landing
  @description

  Landing page of the application.
 */
angular.module('edt-demo.edt', ['ng', 'ui.router']);


/**
  @ngdoc module
  @name boilerplate.utils
  @module boilerplate.utils
  @description

  This module contains helpers and global configuration required by your app
 */
angular.module('edt-demo.utils', ['ng', 'ui.router']);

angular.module('edt-demo.edt').controller('CourseListCtrl', function($scope, $stateParams, $mdDialog, CourseFactory, DepartmentListExtractor, localStorageService) {
  var alertNoNetwork, setDepartment;
  $scope.currentDepartment = null;
  $scope.currentDate = new Date();
  $scope.errorNoNetwork = false;
  alertNoNetwork = $mdDialog.alert().title('Erreur réseau').content('Impossible de récupérer la liste des cours !').ariaLabel('Network error').ok('Dommage :(');
  $scope.loadCourses = function() {
    return CourseFactory.findAll().success(function(data) {
      $scope.errorNoNetwork = false;
      $scope.courses = data;
      console.log("Found " + $scope.courses.length + " courses");
      $scope.departments = DepartmentListExtractor.extract($scope.courses);
      console.log("Found " + $scope.departments.length + " departments");
      return setDepartment();
    }).error(function() {
      $mdDialog.show(alertNoNetwork);
      return $scope.errorNoNetwork = true;
    });
  };
  $scope.departmentFilter = function(course) {
    return !$scope.currentDepartment || course.department === $scope.currentDepartment;
  };
  $scope.pastCourseFilter = function(course) {
    return !$scope.prefs.hidePastCourses || new Date(Date.parse(course.time_end)) > $scope.currentDate;
  };
  $scope.loadCourses();
  return setDepartment = function() {
    $scope.currentDepartment = $stateParams.dep || localStorageService.get('currentDepartment') || null;
    return $scope.$watch('currentDepartment', function() {
      return localStorageService.set('currentDepartment', $scope.currentDepartment);
    }, true);
  };
});

angular.module('edt-demo.edt').controller('ParametersCtrl', function($scope, $stateParams, $mdDialog, $mdSidenav, localStorageService) {
  var prefs;
  prefs = localStorageService.get('prefs');
  if (prefs) {
    $scope.prefs = prefs;
  } else {
    $scope.prefs = {
      hidePastCourses: true
    };
  }
  $scope.$watch('prefs', function() {
    return localStorageService.set('prefs', $scope.prefs);
  }, true);
  return $scope.toggleSidebar = function() {
    return $mdSidenav('left').toggle();
  };
});

angular.module('edt-demo.edt').factory('CourseFactory', function($rootScope, $http, BASE_API_URL) {
  var findAll, findByDepartment;
  findAll = function(date) {
    var params;
    if (date == null) {
      date = null;
    }
    params = {
      date: date || moment().format('DD/MM/YYYY')
    };
    return $http({
      method: 'GET',
      url: BASE_API_URL + 'courses',
      params: params
    }).success(function(data) {
      return data;
    });
  };
  findByDepartment = function(departmentCode, date) {
    var params;
    if (date == null) {
      date = null;
    }
    params = {
      date: date || moment().format('DD/MM/YYYY'),
      department: departmentCode
    };
    return $http({
      method: 'GET',
      url: BASE_API_URL + 'courses',
      params: params
    }).success(function(data) {
      return data;
    });
  };
  return {
    findAll: findAll,
    findByDepartment: findByDepartment
  };
});

angular.module('edt-demo.edt').service('DepartmentListExtractor', function(localStorageService) {
  var extract;
  extract = function(courses) {
    var course, departments, _i, _len;
    departments = localStorageService.get('departments');
    if (!departments) {
      console.log('Extracting departments...');
      departments = [];
      for (_i = 0, _len = courses.length; _i < _len; _i++) {
        course = courses[_i];
        if (departments.indexOf(course.department) === -1) {
          departments.push(course.department);
        }
      }
      localStorageService.set('departments', departments);
    }
    return departments;
  };
  return {
    extract: extract
  };
});


/**
  @ngdoc object
  @name storage
  @module edt-demo.utils
  @description

  This value object is an application-wide data-store.
  It's published in `$rootScope` for easy-access in views.
 */
angular.module('edt-demo.utils').value('storage', {}).run(function($rootScope, storage) {
  return $rootScope.storage = storage;
});

angular.module('edt-demo.edt').config(function(localStorageServiceProvider) {
  return localStorageServiceProvider.setPrefix('edt');
});

angular.module('edt-demo.edt').constant('BASE_API_URL', 'http://api-edt-ponts.securem.eu/');

angular.module('edt-demo.edt').config(function($stateProvider, $urlRouterProvider) {
  $stateProvider.state('edt', {
    url: '/?dep',
    controller: 'CourseListCtrl',
    templateUrl: 'edt/views/view.html'
  });
  return $urlRouterProvider.otherwise('/');
});

//# sourceMappingURL=data:application/json;base64,