
/**
  @ngdoc module
  @name edt-demo
  @module edt-demo
  @description

  This module requires all submodules of your app
 */
angular.module('edt-demo', ['ngMaterial', 'edt-demo.utils', 'edt-demo.edt']);


/**
  @ngdoc module
  @name edt-demo.landing
  @module edt-demo.landing
  @description

  Landing page of the application.
 */
angular.module('edt-demo.edt', ['ng', 'ui.router', 'pascalprecht.translate']);


/**
  @ngdoc module
  @name boilerplate.utils
  @module boilerplate.utils
  @description

  This module contains helpers and global configuration required by your app
 */
angular.module('edt-demo.utils', ['ng', 'ui.router', 'pascalprecht.translate']);

angular.module('edt-demo.edt').controller('CourseListCtrl', function($scope, $stateParams, $mdDialog, CourseFactory, DepartmentListExtractor) {
  var alertNoNetwork;
  $scope.currentDepartment = null;
  $scope.currentDate = new Date();
  $scope.errorNoNetwork = false;
  alertNoNetwork = $mdDialog.alert().title('Erreur réseau').content('Impossible de récupérer la liste des cours !').ariaLabel('Network error').ok('Dommage :(');
  $scope.loadCourses = function() {
    return CourseFactory.findAll().success(function(data) {
      $scope.errorNoNetwork = false;
      $scope.courses = data;
      console.log("Found " + $scope.courses.length + " courses");
      $scope.departments = DepartmentListExtractor.extract($scope.courses);
      console.log("Found " + $scope.departments.length + " departments");
      return $scope.currentDepartment = $stateParams.dep;
    }).error(function() {
      $mdDialog.show(alertNoNetwork);
      return $scope.errorNoNetwork = true;
    });
  };
  $scope.departmentFilter = function(course) {
    return !$scope.currentDepartment || course.department === $scope.currentDepartment;
  };
  $scope.pastCourseFilter = function(course) {
    return !$scope.prefs.hidePastCourses || course.time_end > $scope.currentDate;
  };
  return $scope.loadCourses();
});

angular.module('edt-demo.edt').controller('ParametersCtrl', function($scope, $stateParams, $mdDialog, $mdSidenav, $timeout) {
  var hidePastCourses;
  $scope.prefs = hidePastCourses = false;
  return $scope.toggleSidebar = function() {
    return $mdSidenav('left').toggle();
  };
});

angular.module('edt-demo.edt').constant('BASE_API_URL', 'http://api-edt-ponts.securem.eu/');

angular.module('edt-demo.edt').config(function($stateProvider) {
  return $stateProvider.state('edt', {
    url: '/?dep',
    controller: 'CourseListCtrl',
    templateUrl: 'edt/views/view.html'
  });
});

angular.module('edt-demo.edt').config(function($translateProvider) {
  $translateProvider.translations('en', {
    HOME_TITLE: 'Welcome',
    HOME_TEXT: 'This is the beginning of an extraordinary app...'
  });
  return $translateProvider.translations('fr', {
    HOME_TITLE: 'Bienvenue',
    HOME_TEXT: 'Ceci est le commencement d\'une appli extraordinaire...'
  });
});

angular.module('edt-demo.edt').factory('CourseFactory', function($rootScope, $http, BASE_API_URL) {
  var findAll, findByDepartment;
  findAll = function(date) {
    var params;
    if (date == null) {
      date = null;
    }
    params = {
      date: date || moment().format('DD/MM/YYYY')
    };
    return $http({
      method: 'GET',
      url: BASE_API_URL + 'courses',
      params: params
    }).success(function(data) {
      return data;
    });
  };
  findByDepartment = function(departmentCode, date) {
    var params;
    if (date == null) {
      date = null;
    }
    params = {
      date: date || moment().format('DD/MM/YYYY'),
      department: departmentCode
    };
    return $http({
      method: 'GET',
      url: BASE_API_URL + 'courses',
      params: params
    }).success(function(data) {
      return data;
    });
  };
  return {
    findAll: findAll,
    findByDepartment: findByDepartment
  };
});

angular.module('edt-demo.edt').service('DepartmentListExtractor', function() {
  var extract;
  extract = function(courses) {
    var course, departments, _i, _len;
    departments = [];
    for (_i = 0, _len = courses.length; _i < _len; _i++) {
      course = courses[_i];
      if (departments.indexOf(course.department) === -1) {
        departments.push(course.department);
      }
    }
    return departments;
  };
  return {
    extract: extract
  };
});

angular.module('edt-demo.utils').config(function($translateProvider) {
  $translateProvider.fallbackLanguage('en');
  return $translateProvider.determinePreferredLanguage();
});

angular.module('edt-demo.utils').config(function($locationProvider) {
  $locationProvider.html5Mode(true);
  return $locationProvider.hashPrefix('!');
});


/**
  @ngdoc object
  @name storage
  @module edt-demo.utils
  @description

  This value object is an application-wide data-store.
  It's published in `$rootScope` for easy-access in views.
 */
angular.module('edt-demo.utils').value('storage', {}).run(function($rootScope, storage) {
  return $rootScope.storage = storage;
});

//# sourceMappingURL=data:application/json;base64,